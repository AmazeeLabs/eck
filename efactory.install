<?php
// $Id$

/**
 * @file
 * This install file creates a table for the this module to store information about entities.
 * Well, the only information that it needs to store is a name and a label for each entity created,
 * the rest of the information is generated by the functions
 * 
 * efactory__entity_info
 * efacoty__entity_schema
 * efactory__entity_menu
 * 
 * in efactory.module
 */

/**
 * TODO: Currently when the module is uninstalled, the tables of Entities that were left behind
 * are still around, can we warn the user when they are trying to uninstall about the
 * left over entities that are being managed?
 */

/**
 * Create the database table that will store the entities information.
 * All that we need for each entity is a name and a label
 */
function efactory_schema() {

  $schema = array();
  
  //Schema for the efactory table
  $schema['efactory'] = array(
    'description' => "The base table for entities information",
    'fields' => array(
      'id' => array(
        'description' => "The primary identifier for a(n) entity",
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => "The machine name of the entity",
        'type' => 'varchar',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE
      ),
      'label' => array(
        'description' => "The entity's Label",
        'type' => 'varchar',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE
      )
    ),
    'primary key' => array('id'),
  );
  
  //At the installation stage, efactory has not been created, so what is this for?
  if (db_table_exists('efactory')) {
    
    //When something requests an entity's info, the hook_schema is called to get
    //the information about the entity's table, so we need to provide that information
    //in the hook
    
    //get all the entities that have been create (all the rows in efactory table)
    $results = db_select('efactory', 'e')->fields('e', array('name', 'label'))->execute();
    foreach ($results as $result) {
      
      //the function entity_basic_schema defines a standard schema for each entity created
     $schema = array_merge($schema, 
       array("efactory_{$result->name}" =>  efactory__entity_schema($result->name)));
    }
  }
  
  return $schema;
}