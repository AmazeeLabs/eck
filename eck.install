<?php
// $Id$

/**
 * @file
 * This install file creates a table for the this module to store information about entities.
 * Well, the only information that it needs to store is a name and a label for each entity created,
 * the rest of the information is generated by the functions
 * 
 * eck__entity_info
 * efacoty__entity_schema
 * eck__entity_menu
 * 
 * in eck.module
 */

/**
 * TODO: Currently when the module is uninstalled, the tables of Entities that were left behind
 * are still around, can we warn the user when they are trying to uninstall about the
 * left over entities that are being managed?
 */

/**
 * Create the database table that will store the entities information.
 * All that we need for each entity is a name and a label
 */
function eck_schema() {

  $schema = array();
  
  //Schema for the eck table
  $schema['eck'] = array(
    'description' => "The base table for entities information",
    'fields' => array(
      'id' => array(
        'description' => "The primary identifier for a(n) entity",
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => "The machine name of the entity",
        'type' => 'varchar',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE
      ),
      'label' => array(
        'description' => "The entity's Label",
        'type' => 'varchar',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE
      )
    ),
    'primary key' => array('id'),
  );
  
  $schema['eck_types'] = array(
    'description' => "The base table for entities types information",
    'fields' => array(
      'id' => array(
        'description' => "The primary identifier for a(n) entity type",
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'entity' => array(
        'description' => "The entity this type belongs to",
        'type' => 'varchar',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE
      ),
      'type' => array(
        'description' => "The type (bundle) name that will be used",
        'type' => 'varchar',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE
      ),
      'label' => array(
        'description' => "A human readable name for the bundle (not that the type is not human readable)",
        'type' => 'varchar',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE
      )
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'entity_type'      => array('entity', 'type'),
    ),
  );
  
  //At the installation stage, eck has not been created, so what is this for?
  if (db_table_exists('eck')) {
    
    //When something requests an entity's info, the hook_schema is called to get
    //the information about the entity's table, so we need to provide that information
    //in the hook
    
    //get all the entities that have been create (all the rows in eck table)
    $results = db_select('eck', 'e')->fields('e', array('name', 'label'))->execute();
    foreach ($results as $result) {
      
      //the function entity_basic_schema defines a standard schema for each entity created
     $schema = array_merge($schema, 
       array("eck_{$result->name}" =>  eck__entity__schema($result->name)));
    }
  }
  
  return $schema;
}

function eck_update_7000(){
  
  //to implement bundles (types), I have decided to have one table that will hold all 
  //of the types information. So for this update we need to create the table, and add all of the current
  //entities with their types to the table, so we can unify the implementations of bundles in code
  
  $schema = array(
    'description' => "The base table for entities types information",
    'fields' => array(
      'id' => array(
        'description' => "The primary identifier for a(n) entity type",
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'entity' => array(
        'description' => "The entity this type belongs to",
        'type' => 'varchar',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE
      ),
      'type' => array(
        'description' => "The type (bundle) name that will be used",
        'type' => 'varchar',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE
      ),
      'label' => array(
        'description' => "A human readable name for the bundle (not that the type is not human readable)",
        'type' => 'varchar',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE
      )
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'entity_type'      => array('entity', 'type'),
    ),
  );
  
  db_create_table('eck_types', $schema);
  
  //now we add a type (bundle) to the table for each entity in the eck table
  
  $results = db_select('eck', 't')->fields('t')->execute();
  
  foreach($results as $record){
    
    $nid = db_insert('eck_types')
    ->fields(array(
        'entity' => $record->name,
        'type' => $record->name,
        'label' => $record->label,
    ))
    ->execute();
    
    //also we want to add a field to all the enity tables for the type, and populated with
    //the current type
    db_add_field("eck_{$record->name}",'type', array(
    'description' => 'The type of the entity',
    'type' => 'varchar',
    'default' => '',
    'length' => 255,
    'not null' => TRUE,
    'initial' => $record->name
  ));
    
  }
  
}

function eck_update_7001(){
  
  //for importing and exporting things it is always good to have a uuid, so we will add that colunm to the current
  //entity types
  
  //now we add a type (bundle) to the table for each entity in the eck table
  
  $results = db_select('eck', 't')->fields('t')->execute();
  
  foreach($results as $record){
    
    //also we want to add a field to all the enity tables for the type, and populated with
    //the current type
    db_add_field("eck_{$record->name}",'uuid', array(
     'type' => 'char',
    'length' => 36,
    'not null' => TRUE,
    'default' => '',
    'description' => 'The Universally Unique Identifier.'
    ));
    
  }
}

function eck_update_7002(){
  
  //The more I think about it, the more it makes sense to replicate the "status" property from nodes, this is just a flag that lets
  //the system know whether a piece of data should be seen by the public or not. Instead of a boolean, I think that a int instead of 
  //a boolean could be more useful, that way more complicated workflows can be implemented. For example if a piece of data needs to
  //be reviewed before showing it to the public, and int can campture those different states: 0- don't show 1 - show 3 - needs review 
  // 4 - revised by editor, etc. Also instead of status, I think that "state" is a more appropiate name. 
  
  $results = db_select('eck', 't')->fields('t')->execute();
  
  foreach($results as $record){
    
    db_add_field("eck_{$record->name}",'state', array(
     'type' => 'int',
     'unsigned' => TRUE,
     'not null' => TRUE,
     'default' => 0,
     'description' => 'The state of the entity'
    ));
  }
}

