<?php
// $Id$

/**
 * @file
 *
 * Here is all of the logic that creates and manages entities
 *
 * TODO: Write some more about the logic flow of things
 */

/****************************************************
 *             ENTITY CONSTRUCTION KIT
 ****************************************************/

/**
 * Implements hook_features_api().
 */
function eck_features_api() {
  return array(
    'eck' => array(
      'name' => t('Entity types'),
      'feature_source' => TRUE,
      'default_hook' => 'eck_info',
    ),
  );
}



/**
 * Implements hook_entity_info().
 *
 * The Entity information for all the entities created with the factory.
 */
function eck_entity_info() {
  $info = array();

  //Get all the names of all the entity types from the eck table
  //for each of the created entity types add its info to the $info array
  foreach (eck__get_entity_types() as $entity_type) {
  	//dpm($entity_type);
    //eck__entity_info creates the entity_info for each entity
    $info = array_merge($info, eck__entity_type__info($entity_type));
  }

  return $info;
}



/**
 * Implements hook_entity_property_info_alter().
 */
function eck_entity_property_info_alter(&$info) {
  // Create property infos for all defined entites.
  foreach (eck__get_entity_types () as $entity_type) {
    eck__entity_type__property_info($info[$entity_type], $entity_type);
  }
}



/**
 * Define the paths for the administration section of the Entity Factory
 */
function eck_menu() {

  $menu = eck__entity_type__menu();
  return $menu;
}



/**
 * Implements hook_permission().
 */
function eck_permission() {
  $perms = array();

  $perms['administer entity types'] =
  array(
    'title' => t('Administer Entity Types'),
    'restrict access' => TRUE
  );
  
  $perms['add entity types'] =
  array(
    'title' => t('Add Entity Types'),
    'restrict access' => TRUE
  );

  foreach (eck__get_entity_types() as $entity_type) {
    $entity_type_label = eck__get_entity_type_label($entity_type);
        
    
    foreach (array('administer', 'add') as $op) {
      $perms["{$op} {$entity_type} bundles"] = array(
        'title' => ucfirst($op) . " {$entity_type_label} Bundles"
      );   
    }
    
    foreach(eck__get_bundles($entity_type) as $bundle){
      $bundle_label = eck__get_bundle_label($entity_type, $bundle);
      
      foreach (array('administer', 'add', 'view', 'edit', 'delete') as $op) {
        $perms["{$op} {$entity_type} {$bundle} entities"] = array(
          'title' => ucfirst($op) . " {$entity_type_label} {$bundle_label} Entities"
        );   
      }
    }
  }

  return $perms;
}



/* * **************************************************
 *           ECK Entity Type
 * ************************************************** */



function eck__entity_type__menu() {
  $menu = array();

  //OVERVIEW Entity Type
  $menu['admin/structure/eck'] = array(
    'title' => 'Entity Type',
    'description' => 'A centralized administrative section for entity types',
    'page callback' => 'eck__entity_type__overview',
    'access arguments' => array('administer entity types')
  );

  //ADD Entity
  $menu["admin/structure/eck/add"] = array(
    'title' => 'Add Entity Type',
    'description' => 'Add new entity type',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eck__entity_type__add'),
    'access arguments' => array('add entity types'),
    'type' => MENU_LOCAL_ACTION,
    'weight' => 1
  );

  /*   * ****** GET BUNDLE MENUS ********* */
  //Now lets create the menus for the bundle administration of each
  //entity type
  foreach (eck__get_entity_types () as $entity_type) {
    $menu = array_merge($menu, eck__bundle__menu($entity_type));
  }

  return $menu;
}



function eck__entity_type__overview() {

  $header = array(t('Name'), array('data' => t('Operations'), 'colspan' => '1'));
  $rows = array();

  $results = db_select('eck', 'e')->fields('e')->execute();

  foreach ($results as $record) {
    $id = $record->id;
    $name = $record->name;
    $label = $record->label;

    $row = array(l("{$id} : {$label}", "admin/structure/eck/{$name}"));
    /* $row[] = array('data' => l(t('delete'), "admin/structure/eck/{$name}/delete")); */
    $rows[] = $row;
  }
  $build['entity_table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
  );

  return $build;
}



function eck__entity_type__add($form, &$form_state) {

  $form['entity_type_label'] = array(
    '#type' => 'textfield',
    '#title' => "Entity Type",
    '#description' => "A human readable name for the entity type",
    '#required' => TRUE
  );

  $form['entity_type'] = array(
    '#type' => 'machine_name',
    '#machine_name' => array(
      'exists' => '_eck_fake_exists',
      'source' => array('entity_type_label'),
    ),
  );

  $form['bundle_label'] = array(
    '#type' => 'textfield',
    '#title' => "Bundle (optional)",
    '#description' => "A bundle with the same name as the entity type is created by default, this will override the default",
  );

  $form['bundle'] = array(
    '#type' => 'machine_name',
    '#required' => FALSE,
    '#machine_name' => array(
      'exists' => '_eck_fake_exists',
      'source' => array('bundle_label'),
    ),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#weight' => 10000,
    '#value' => t('Save'),
  );

  return $form;
}



/* function eck__entity__add_validate($form, &$form_state) {
  preg_match("/([^a-z0-9_]|\s)/", $form_state['values']['name'], $matches);

  if (!empty($matches)) {
  form_set_error('name', t("Your Entity name has invalid characters or spaces"));
  }
  } */



function eck__entity_type__add_submit($form, &$form_state) {

  //This are required so I don't have to do any checks
  $entity_type = $form_state['values']['entity_type'];
  $entity_type_label = $form_state['values']['entity_type_label'];

  //If the table does not exist, then this is a valid entity name, and we can save it.
  if (!db_table_exists("eck_{$entity_type}")) {

    //lets add the type to the table
    if (!empty($form_state['values']['bundle'])) {
      $bundle = $form_state['values']['bundle'];
      if (!empty($form_state['values']['bundle_label'])) {
        $bundle_label = $form_state['values']['bundle_label'];
      }
      else {
        $bundle_label = ucfirst($bundle);
      }
    }
    else {
      $bundle = $entity_type;
      $bundle_label = $entity_type_label;
    }

    db_insert('eck_types')
        ->fields(array(
          'entity' => $entity_type,
          'type' => $bundle,
          'label' => $bundle_label,
        ))
        ->execute();

    db_insert('eck')
        ->fields(array(
          'name' => $entity_type,
          'label' => $entity_type_label,
        ))
        ->execute();

    db_create_table("eck_{$entity_type}", eck__entity_type__schema($entity_type));

    // Clear info caches in order to pick up newly created entities.
    drupal_get_schema(NULL, TRUE);
    entity_info_cache_clear();
    // Rebuild the menu to pick up entity related paths.
    menu_rebuild();

    drupal_set_message(t('Entity type %entity_type has been created.', array('%entity_type' => $entity_type_label)));

    drupal_goto("admin/structure/eck/{$entity_type}");
  }
  else {
    drupal_set_message(t('Database table %name already exists', array('%name' => $entity_type)), 'error');
  }
}



/* function eck_delete($form, &$form_state, $name, $label) {

  $form['entity_name'] =
  array(
  '#type' => 'value',
  '#value' => $name,
  );

  $message = t("Are you sure that you want to delete %label", array("%label" => $label));
  $caption = t("This action is irreversible");

  return confirm_form($form, $message, 'admin/eck', $caption, t('Delete'));
  }

  function eck_delete_submit($form, &$form_state) {

  $name = $form_state['values']['entity_name'];

  //delete the bundle
  field_attach_delete_bundle($name, $name);

  //delete the eck database entry
  db_delete('eck')
  ->condition('name', $name)
  ->execute();

  //drop the table
  db_drop_table("eck_{$name}");

  drupal_cron_run();

  //lets rebuild the menu to remove all entity paths
  menu_rebuild();

  $form_state['redirect'] = "admin/eck";
  } */



function eck__entity_type__schema($entity_type) {
  $schema = array(
    'description' => "The base table for a(n) {$entity_type}.",
    'fields' => array(
      'uuid' => array(
        'type' => 'char',
        'length' => 36,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The Universally Unique Identifier.'
      ),
      'id' => array(
        'description' => "The primary identifier for a(n) {$entity_type}.",
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The bundle of the entity',
        'type' => 'varchar',
        'default' => '',
        'length' => 255,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => "The {users}.uid that owns this {$entity_type}; initially, this is the user that created it.",
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => "The Unix timestamp when the {$entity_type} was created.",
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => "The Unix timestamp when the {$entity_type} was most recently saved.",
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'state' => array(
         'description' => "Entity state",
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0
      )
    ),
    'indexes' => array(
      "{$entity_type}_changed" => array('changed'),
      "{$entity_type}_created" => array('created'),
      'uid' => array('uid'),
    ),
    'foreign keys' =>
    array(
      "{$entity_type}_author" =>
      array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
    'primary key' => array('id'),
  );


  drupal_alter('eck_schema', $schema, $entity_type);

  return $schema;
}



/**
 * Generate the entity info for a specific entity
 *
 * @param $name the name of the entity
 * @param $label the label of the entity
 */
function eck__entity_type__info($entity_type) {
  $info = array();
  $entity_type_label = eck__get_entity_type_label($entity_type);
  //dpm($entity_type_label, "label");

  if (!drupal_autoload_class($entity_class = eck_get_class_name($entity_type, 'Entity'))) {
    $entity_class = 'Entity';
  }
  if (!drupal_autoload_class($controller_class = eck_get_class_name($entity_type, 'Controller'))) {
    $controller_class = 'EckController';
  }

  $info[$entity_type] = array(
    'label' => t($entity_type_label),
    'base table' => "eck_{$entity_type}",
    'entity class' => $entity_class,
    'controller class' => $controller_class,
    'module' => 'eck',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'bundle' => 'type'
    ),
    'label callback' => 'eck__entity__label',
    'uri callback' => 'eck__entity__uri',
    // Bundles are defined by the entity types below
    'bundles' => array(),
    // Bundle keys tell the FieldAPI how to extract information from the bundle objects
    'bundle keys' => array(
      'bundle' => 'type'
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => TRUE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => TRUE,
      ),
      'search' => array(
        'label' => t('Search'),
        'custom settings' => TRUE,
      ),
      'xml' => array(
        'label' => t('XML'),
        'custom settings' => TRUE,
      ),
      'rss' => array(
        'label' => t('RSS'),
        'custom settings' => TRUE,
      ),
    )
  );

  foreach (eck__get_bundles($entity_type) as $bundle) {
  	//dpm($bundle,"Bundle");
  	
  	$bundle_label = eck__get_bundle_label($entity_type, $bundle);
  	//dpm($bundle_label, "Bundle Label");
    $info[$entity_type]['bundles'][$bundle] = array(
      'label' => $bundle_label,
      'admin' => array(
        'path' => "admin/structure/eck/{$entity_type}/{$bundle}",
        'access arguments' => array('administer entities')
      )
    );
  }

  return $info;
}



/**
 * Entity specific implementation of hook_entity_property_info_alter().
 */
function eck__entity_type__property_info(&$info, $entity_type) {
  $properties = &$info['properties'];

  $properties['uid']['label'] = t('User');
  $properties['uid']['type'] = 'user';
  #$properties['uid']['description'] = t('The user this storage belongs to.');

  $properties['created']['label'] = t('Created');
  $properties['created']['type'] = 'date';
  #$properties['created']['description'] = t('The Unix timestamp when the entity has been created.');

  $properties['changed']['label'] = t('Changed');
  $properties['changed']['type'] = 'date';
  #$properties['changed']['description'] = t('The Unix timestamp when the entity was most recently saved.');
}



/* * **************************************************
 *                    BUNDLES
 * ************************************************** */



function eck__bundle__overview($entity_type) {

  $header = array(t('Type'), array('data' => t('Operations'), 'colspan' => '1'));
  $rows = array();

  foreach (eck__get_bundles($entity_type) as $bundle) {
  	
  	$bundle_label =  eck__get_bundle_label($entity_type, $bundle);
  	
    $uri = "admin/structure/eck/{$entity_type}/{$bundle}";
    $row = array(l($bundle_label, url($uri, array('absolute' => TRUE))));
    //$row[] = array('data' => l(t('delete'), "admin/structure/eck/{$name}/{$id}/delete"));
    $rows[] = $row;
  }

  $build['bundle_table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
  );

  $build['sample_code'] = array(
    '#theme' => 'form_element',
    '#title' => t('Optional entity class'),
    '#description' => t('You may add this custom class the entity. To create a new instance of this class programmatically call: %code', array(
      '%code' => "entity_create('{$entity_type}', array());"
    )),
    '#children' => "<pre>" . check_plain("class " . eck_get_class_name($entity_type, 'EntityType') . " extends Entity{\n\n}") . "</pre>"
  );



  return $build;
}



function eck__bundle__menu($entity_type) {
 
  $entity_type_label = eck__get_entity_type_label($entity_type);

  //Create the menus relavant to types
  $menu = array();

  //OVERVIEW Entity types
  $menu["admin/structure/eck/{$entity_type}"] = array(
    'title' => "{$entity_type_label} Bundles" ,
    'description' => "View all the bundles for '{$entity_type_label}'",
    'page callback' => "eck__bundle__overview",
    'page arguments' => array($entity_type),
    'access arguments' => array("administer {$entity_type} bundles"),
    'weight' => 0
  );

  $menu["admin/structure/eck/{$entity_type}/add"] = array(
    'title' => "Add a(n) '{$entity_type_label}' Bundle ",
    'description' => "Add a(n) new '{$entity_type_label} Bundle'",
    'page callback' => "drupal_get_form",
    'page arguments' => array('eck__bundle__add', $entity_type),
    'access arguments' => array("add {$entity_type} bundles"),
    'type' => MENU_LOCAL_ACTION,
    'weight' => 1
  );

  foreach (eck__get_bundles($entity_type) as $bundle) {
    $menu = array_merge($menu, eck__entity__menu($entity_type, $bundle));
  }

  return $menu;
}



//ADD Entity types
function eck__bundle__add($form, &$form_state, $entity_type) {

  $form['entity_type'] = array(
    '#type' => 'value',
    '#value' => $entity_type,
  );

  $form['bundle_label'] = array(
    '#type' => 'textfield',
    '#title' => "Type",
    '#description' => "A Human readable name for the bundle",
  );

  $form['bundle'] = array(
    '#type' => 'machine_name',
    '#required' => FALSE,
    '#machine_name' => array(
      'exists' => '_eck_fake_exists',
      'source' => array('bundle_label'),
    )
  );

  $form['#validate'][] = 'eck__bundle__add_validate';

  $form['submit'] = array(
    '#type' => 'submit',
    '#weight' => 10000,
    '#value' => t('Save'),
  );

  return $form;
}



function eck__bundle__add_validate($form, &$form_state) {

  $entity_type = $form_state['values']['entity_type'];

  //the type does not have to be unique in the table, but it should be unique to its entity so we will check that here
  foreach (eck__get_bundles($entity_type) as $bundle) {
    if ($bundle == $form_state['values']['bundle']) {
      form_set_error('bundle', t("bundle '{$bundle} already exists for this entity"));
    }
  }
}



function eck__bundle__add_submit($form, &$form_state) {

  $entity_type = $form_state['values']['entity_type'];
  $bundle = $form_state['values']['bundle'];
  $bundle_label = $form_state['values']['bundle_label'];

  db_insert('eck_types')
      ->fields(array(
        'entity' => $entity_type,
        'type' => $bundle,
        'label' => $bundle_label,
      ))
      ->execute();

  drupal_set_message(t(' the %bundle for entity type %entity_type has been saved', array('%bundle' => $bundle, '%entity_type' => $entity_type)));

  drupal_get_schema(NULL, TRUE);
  entity_info_cache_clear();
  menu_rebuild();

  drupal_goto("admin/structure/eck/{$entity_type}/{$bundle}");
}


/****************************************************
 *                    ENTITY
 ****************************************************/



function eck__entity__menu($entity_type, $bundle) {
  $menu = array();

  
  $entity_type_label = eck__get_entity_type_label($entity_type);
  $bundle_label = eck__get_bundle_label($entity_type, $bundle);

  //OVERVIEW Entity
  $menu["admin/structure/eck/{$entity_type}/{$bundle}"] = array(
    'title' => "{$entity_type_label} => {$bundle_label} Entities",
    'description' => "View all entites of type {$entity_type_label} with bundle {$bundle_label}",
    'page callback' => "eck__entity__overview",
    'page arguments' => array($entity_type, $bundle),
    'access arguments' => array("administer {$entity_type} {$bundle} entities"),
    'weight' => 0
  );

  $menu["admin/structure/eck/{$entity_type}/{$bundle}/overview"] = array(
    'title' => "Overview",
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0
  );

  //CREATE Entity
  $menu["admin/structure/eck/{$entity_type}/{$bundle}/add"] = array(
    'title' => "Add {$entity_type_label} => {$bundle_label} Entity",
    'description' => "Add an entity of type {$entity_type_label} with bundle {$bundle_label}",
    'page callback' => "eck__entity__add",
    'page arguments' => array($entity_type, $bundle),
    'access arguments' => array("add {$entity_type} {$bundle} entities"),
    'type' => MENU_LOCAL_ACTION,
    'weight' => 1
  );

  //READ Entity
  $menu["{$entity_type}/{$bundle}/%"] = array(
    'title' => "Should be the entity label (implement callback)",
    'description' => "Is there a description callback?",
    'page callback' => "eck__entity__page",
    'page arguments' => array($entity_type, $bundle, 2),
    'access arguments' => array("view {$entity_type} {$bundle} entities"),
    'weight' => 0
  );
  
  $menu["{$entity_type}/{$bundle}/%/view"] = array(
    'title' => "View",
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0
  );

  //UPDATE Entity
  $menu["{$entity_type}/{$bundle}/%/edit"] = array(
    'title' => "Edit",
    'description' => "Is there a description callback? Edit",
    'page callback' => "eck__entity__edit",
    'page arguments' => array($entity_type, $bundle, 2),
    'access arguments' => array("edit {$entity_type} {$bundle} entities"),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1
  );

  //DELETE Entity
  $menu["admin/structure/eck/{$entity_type}/{$bundle}/%/delete"] = array(
     'title' => "Should be the entity label (implement callback) Delete",
    'description' => "Is there a description callback? Delete",
    'page callback' => "drupal_get_form",
    'page arguments' => array('eck__entity__delete', $entity_type, $bundle, 5),
    'access arguments' => array("delete {$entity_type} {$bundle} entities")
  );

  return $menu;
}





function eck__entity__overview($entity_type, $bundle) {

  
  $entity_type_label = eck__get_entity_type_label($entity_type);
  $bundle_label = eck__get_bundle_label($entity_type, $bundle);

  $table = "eck_{$entity_type}";

  //TODO: Mabye I should use entity field query
  //Get all entity instances of this type
  $results = db_select($table, 't')->fields('t')->condition('type', $bundle, '=')->execute();
  
  $ids = array();
  foreach ($results as $record) {
    $ids[] = $record->id;
  }
  
  $entities = entity_load($entity_type, $ids);
  
  
  $build['table'] = entities_table($entities, TRUE);

  $build['sample_code'] = array(
    '#theme' => 'form_element',
    '#title' => t('Optional entity type class'),
    '#description' => t('You may add this custom class for the bundle. To create a new instance of this class programmatically call: %code', array(
      '%code' => "entity_create('{$entity_type}', array('type' => '{$bundle}'));"
    )),
    '#children' => "<pre>" . check_plain("class " . eck_get_class_name($bundle, 'EntityType') . " extends Entity{\n\n}") . "</pre>"
  );

  return $build;
}



function eck__entity__add($entity_type, $bundle) {
  $entity = eck__entity_create($entity_type, $bundle);
  return drupal_get_form("eck__entity__form", $entity);
}



function eck__entity__view($entity_type, $id) {

  if (is_numeric($id)) {
    $entities = entity_load($entity_type, array($id));
  }

  return $entities[$id]->view();
}



function eck__entity__edit($entity_type, $bundle, $id) {
  if (is_numeric($id)) {
    $entities = entity_load($entity_type, array($id));
    $entity = $entities[$id];
  }

  global $user;

  $entity->uid = $user->uid;
  $entity->changed = time();

  return drupal_get_form("eck__entity__form", $entity);
}



function eck__entity__delete($form, &$form_state, $entity_type, $bundle, $id) {
  //dpm($entity_type);
  //dpm($bundle);
  //dpm($id);

  $entities = entity_load($entity_type, array($id));


  $form['entity'] =
      array(
        '#type' => 'value',
        '#value' => $entities[$id],
  );

  $form['entity_type'] =
      array(
        '#type' => 'value',
        '#value' => $entity_type,
  );

  $form['bundle'] =
      array(
        '#type' => 'value',
        '#value' => $bundle,
  );

  $message = t("are you sure that you want to delete %id",
          array("%id" => $id));

  $caption = t("This action is irreversible");

  return confirm_form($form, $message, "admin/structure/eck/{$entity_type}", $caption, t('Delete'));
}



function eck__entity__delete_submit($form, &$form_state) {
  $entity = $form_state['values']['entity'];
  $entity_type = $form_state['values']['entity_type'];
  $bundle = $form_state['values']['bundle'];

  $entity->delete();

  drupal_cron_run();

  //Ok, lets delete the entity
  $form_state['redirect'] = "admin/structure/eck/{$entity_type}/{$bundle}";
}



function eck__entity__form($form, $form_state, $entity) {

  $form['entity'] = array(
    '#type' => 'value',
    '#value' => $entity
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#weight' => 10000,
    '#value' => t('Save'),
  );

  field_attach_form($entity->entityType(), $entity, $form, $form_state);

  return $form;
}



function eck__entity__form_submit($form, &$form_state) {
  $entity = $form_state['values']['entity'];

  if (isset($form_state['field'])) {
    foreach (array_keys($form_state['field']) as $field) {
      $entity->{$field} = _field_unset_empty($field, $form_state['values'][$field]);
    }
  }

  $entity->save();

  //dpm($entity);

  drupal_set_message(t("Entity {$entity->id} has been saved"));
}

function eck__entity__label($entity) {
  $hook_names = array(
  "entity_label", 
  "entity_{$entity->entityType()}_label",
  "entity_{$entity->entityType()}_{$entity->type}_label");
  
  foreach($hook_names as $hook_name){
    $new_label = module_invoke_all($hook_name, $entity, $entity->id);
    $empty = empty($new_label);
    if(!$empty){
      break;
    }
  }

  if (!$empty) {
    return $new_label[0];
  }
  else {
    return $entity->id;
  }
}

function eck__entity__uri($entity) {
  return array('path' => "{$entity->entityType()}/{$entity->type}/{$entity->identifier()}");
}

function eck__entity__page($entity_type, $bundle, $id) {

  $build = array();

  $entity_view = eck__entity__view($entity_type, $id);

  $build["{$entity_type}_{$bundle}_page"] = $entity_view;

  return $build;
}

/***************************************************
 * 				HELPER FUNCTIONS
 **************************************************/

function eck__entity_create($entity_type, $bundle){
 
  global $user;

  $values = array(
    'entity_name' => $entity_type,
    'type' => $bundle,
    'uid' => $user->uid,
    'created' => REQUEST_TIME,
    'changed' => REQUEST_TIME,
  );
  return entity_create($entity_type, $values);
}

/**
 * Get all the bundles for a given entity_type.
 */
function eck__get_bundles($entity_types) {
  $data = db_select('eck_types', 't')->fields('t', array('type'))->condition('entity', $entity_types)->execute();
  $bundles = array();
  
  foreach($data as $bundle_obj){
  	$bundles[] = $bundle_obj->type;
  }
  
  return $bundles;
}

/**
 * Get the label for a given entity type.
 */
function eck__get_bundle_label($entity_type, $bundle){
	$data = db_select('eck_types', 'e')->fields('e', array('label'))
	->condition('entity', $entity_type, '=')
	->condition('type', $bundle, '=')->execute();
  
  foreach($data as $bundle_obj){
  	return $bundle_obj->label;
  }
  
  return NULL;
}




/**
 * Get all defined entity types.
 */
function eck__get_entity_types() {
  $data = db_select('eck', 'e')->fields('e', array('name'))->execute();
  
  $entity_types = array();
  foreach($data as $entity_type_obj){
  	//dpm($entity_type_obj);
  	$entity_types[] = $entity_type_obj->name;
  }
  
  //dpm($entity_types);
  return $entity_types;
}

/**
 * Get the label for a given entity type.
 */
function eck__get_entity_type_label($entity_type){
	$data = db_select('eck', 'e')->fields('e', array('label'))
	->condition('name', $entity_type, '=')->execute();
  
  foreach($data as $entity_type_obj){
  	return $entity_type_obj->label;
  }
  
  return NULL;
}

function entities_table($entities, $select = FALSE){
  //dpm($entities, "Entities");
  $rows = array();
  $header = array(t('Name'), array('data' => t('Operations'), 'colspan' => '1'));
  
  foreach ($entities as $entity) {
    $entity_type = $entity->entityType();
    $bundle = $entity->type;
    $id = $entity->id;
    
    $uri = entity_uri($entity_type, $entity);
    $row = array(l(entity_label($entity_type, $entity), $uri['path'], $uri['options']));
    $row[] = array('data' => l(t('delete'), "admin/structure/eck/{$entity_type}/{$bundle}/{$id}/delete"));
    
    drupal_alter("entity_tr", $row, $entity_type, $entity);
    drupal_alter("entity_{$entity_type}_tr", $row, $entity);
    $rows[$id] = $row;
  }
  
  if($select){
    if(!isset($entity_type)){
     return array('#theme' => 'table', '#header' => $header, '#rows' => $rows);
    }else{
      return drupal_get_form("entity_table_select", $entity_type, $bundle, $header, $rows);
    }
  }else{
    return array('#theme' => 'table', '#header' => $header, '#rows' => $rows);
  }
}

function entity_table_select($form, &$state, $entity_type, $bundle, $header, $rows){
  
  $form['entity_type'] = array('#type' => 'value', '#value' => $entity_type);
  $form['bundle'] = array('#type' => 'value', '#value' => $bundle);
  
  $form['do'] = array(
    '#type' => 'submit',
    '#value' => t('Do'),
  );

  $form['entity_table'] = array(
    //'#theme' => 'table',
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $rows,
  );
  
  return $form;
}

function entity_table_select_submit($form, &$state){
  //dpm($form);
  //dpm($state);
  drupal_alter('entity_table_select_submit', $state);
}





/**
 * When an entity form is submitted, field for which no information  was inputed are
 * still returned, then if we submit that data, empty rows are created in those field databases
 * cluttering them. This function checks and makes sure that the data returned for a field is not
 * empty and unsets it if it is, so no empty data will be added to the database
 *
 * @param $field_name the name of the field
 * @param $data the data for the field: It usually has this format
 * array(lang => array( 0 => array( <field stuff> ), 1 => ...));
 */
function _field_unset_empty($field_name, $data) {

  //if there is a value we need to check that it is not empty
  $info = field_info_field($field_name);

  foreach ($data[LANGUAGE_NONE] as $key => $values) {

    $empty = TRUE;
    foreach (array_keys($info['columns']) as $index) {

      if (!empty($values[$index])) {
        $empty = FALSE;
      }
    }
    if ($empty) {
      unset($data[LANGUAGE_NONE][$key]);
    }
  }

  return $data;
}



function _eck_fake_exists() {
  return FALSE;
}



/**
 * Generates an upper camel case class name from a machine name.
 *
 * @params $name
 *   The machine name to convert to camel case.
 * @params $suffix
 *   Optional class name suffix.
 */
function eck_get_class_name($name, $suffix = '') {
  $parts = array_map('ucfirst', explode('_', $name));
  if ($suffix) {
    $parts[] = $suffix;
  }
  return implode('', $parts);
}

/**
 * Base controller class for ECK entites.
 */
class EckController extends EntityAPIController {



  public function create(array $values = array()) {
    global $user;

    // Set default values.
    $values += array(
      'type' => $this->entityType,
      'uid' => $user->uid,
      'created' => REQUEST_TIME,
      'changed' => REQUEST_TIME,
    );

    // Allow to create custom per-bundle specific class implementations.
    $class_name = eck_get_class_name($values['type'], 'EntityType');
    if (drupal_autoload_class($class_name)) {
      $this->entityInfo['entity class'] = $class_name;
    }

    return parent::create($values);
  }
}
