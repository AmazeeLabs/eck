<?php 
// $Id$

/**
 * @file
 * 
 * Here is all of the logic that creates and manages entities
 * 
 * TODO: Write some more about the logic flow of things
 */

/****************************************************
 *                ENTITY FACTORY
 ****************************************************/

/**
 * The Entity information for all the entities created
 * with the factory
 */
function eck_entity_info() {
  $info = array();
  
  //Get all the data from the eck table (All of the entities created)
  $results = _db_get_all('eck');
  
  //for each of the created entities add its entity info to the $info array
  foreach ($results as $result) {
 
    //eck__entity_info creates the entity_info for each entity
    $info = array_merge($info, eck__entity_info($result->name, $result->label));
  }
  
  return $info;
}

/**
 * Define the paths for the administration section of the Entity Factory
 */
function eck_menu() {
  
  $menu =  array();
  
  $menu['admin/eck'] =
  array(
    'title' => 'Entity',
    'description' => 'A centralized Administrative section for Entities',
    'page callback' => 'eck_overview',
    'access arguments' => array('administer entity')
  );
  
  $menu["admin/eck/overview"] = array(
      'title' => "Overview",
      'type' => MENU_DEFAULT_LOCAL_TASK
    );
  
  $menu["admin/eck/add"] = array(
    'title' => 'Add',
    'description' => "Add a new Entity",
    'page callback' => "drupal_get_form",
    'page arguments' => array('eck_add'),
    'access arguments' => array("administer entity"),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1
  );
  
  $results = _db_get_all('eck');
  
  //create the paths for entity administration, the paths are defined by
  //eck__entity_menu()
  foreach ($results as $result) {
    $menu = array_merge($menu, eck__entity_menu($result->name, $result->label));
  }
  
  return $menu;
  
}

function eck_permission() {
  $perms = 
  array(
    'administer entity' => 
    array(
      'title' => t('Administer Entity'),
      'restrict access' => TRUE
    )
  );
  
  foreach (_db_get_all('eck') as $result) {
    foreach (array('add', 'view', 'edit') as $op) {
      $perms["{$op} {$result->name}"] = 
      array(
        'title' => t(ucfirst($op) . " {$result->label}")
      );
    }
  }
  
  return $perms;
}

/****************************************************
 *           ENTITY FACTORY CALLBACKS
 ****************************************************/

function eck_overview() {
  
  $header = array(t('Name'), array('data' => t('Operations'), 'colspan' => '1'));
  $rows = array();
  
  $results = db_select('eck', 'e')->fields('e')->execute();
  
  foreach ($results as $record) {
    $id = $record->id;
    $name = $record->name;
    $label = $record->label;
    
    $row = array(l("{$id} : {$label}", "admin/eck/{$name}"));
    $row[] = array('data' => l(t('delete'), "admin/eck/{$name}/delete"));
    $rows[] = $row;
  }
  $build['entity_table'] = array(
  '#theme' => 'table',
  '#header' => $header,
  '#rows' => $rows,
  );
  
  return $build;

}

function eck_add($form, &$form_state) {
  
  //TODO: Validata name and label
  
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => "Name",
    '#description' => "The name of the entity should be all lowercase, words separated by
    underscores, and no fancy characters",
    '#required' => TRUE
  );
  
  $form['label'] = array(
    '#type' => 'textfield',
    '#title' => "Label",
    '#description' => "Human readable name",
    '#required' => TRUE
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#weight' => 10000,
    '#value' => t('Save'),
  );
  
   $form['#validate'][] = 'eck_add_validate';
  
  return $form; 
}

function eck_add_validate($form, &$form_state) {
  
  preg_match("/([^a-z0-9_]|\s)/", $form_state['values']['name'], $matches);
  
  if (!empty($matches)) {
    form_set_error('name', t("Your Entity name has invalid characters or spaces"));
  }
  
}

function eck_add_submit($form, &$form_state) {
  
  $input = $form_state['input'];
  $record = (object) array(
  'name' => $input['name'], 
  'label' => $input['label'], 
  );
  
  $dwr = drupal_write_record('eck', $record);
  
  if (!db_table_exists($record->name)) {
    db_create_table("eck_{$record->name}", eck__entity_schema($record->name));
  }
  else {
    drupal_set_message(t("Database table %name already exists", array('%name' => $record->name)), 'error');
  }
  
  //lets rebuild the menu for the new entity
  menu_rebuild();
  
}

function eck_delete($form, &$form_state, $name, $label) {
  
  $form['entity_name'] =
  array(
  '#type' => 'value',
  '#value' => $name,
  );
  
  $message = t("Are you sure that you want to delete %label", array("%label" => $label));
  $caption = t("This action is irreversible");
  
  return confirm_form($form, $message, 'admin/eck', $caption, t('Delete')); 
}

function eck_delete_submit($form, &$form_state) {
  
  $name = $form_state['values']['entity_name'];
  
  //delete the bundle
  field_attach_delete_bundle($name, $name);
  
  //delete the eck database entry
  db_delete('eck')
  ->condition('name', $name)
  ->execute();
  
  //drop the table
  db_drop_table("eck_{$name}");
  
  drupal_cron_run();
  
  //lets rebuild the menu to remove all entity paths
  menu_rebuild();
  
  $form_state['redirect'] = "admin/eck";
}


/****************************************************
 *                    ENTITY
 ****************************************************/

function eck__entity_overview($name) {
  
  $header = array(t('Name'), array('data' => t('Operations'), 'colspan' => '1'));
  $rows = array();
  
  $table = "eck_{$name}";
  
  foreach (_db_get_all($table) as $record) {
      $id = $record->id;
      $objs = entity_load($name, array($id));
      $obj = $objs[$id];
      $uri = entity_uri($name, $obj);
      $row = array(l(entity_label($name, $obj), $uri['path'], $uri['options']));
      $row[] = array('data' => l(t('delete'), "admin/eck/{$name}/{$id}/delete"));
      $rows[] = $row;
  }
  
  $build['entity_table'] = array(
  '#theme' => 'table',
  '#header' => $header,
  '#rows' => $rows,
  );
  
  return $build;
}

function eck__entity_add($name) {
  
  global $user;
  
  $values = array();
  $values['entity_name'] = $name;
  $values['uid'] = $user->uid;
  $values['created'] = time();
  $values['changed'] = time();
  
  
  $obj = entity_create($name, $values);
  
  return drupal_get_form("eck__entity_form", $obj);
  
}

function eck__entity_view($name, $id) {
 
  if (is_numeric($id)) {
     $obj = entity_load($name, array($id));
  }
  
  return $obj[$id]->view();
  
}


function eck__entity_edit($name, $id) {
  
  if (is_numeric($id)) {
     $objs = entity_load($name, array($id));
     $obj = $objs[$id];
  }
  
  global $user;
  
  $obj->uid = $user->uid;
  $obj->changed = time(); 
  
  return drupal_get_form("eck__entity_form", $obj);
  
}

function eck__entity_delete($form, &$form_state, $name, $label, $id) {

  $objs = entity_load($name, array($id));
  
  
  $form['entity'] =
  array(
    '#type' => 'value',
    '#value' => $objs[$id],
  );
  
  $message = t("are you sure that you want to delete %label : %id", 
    array("%label" => $label, "%id" => $id));
    
  $caption = t("This action is irreversible");
  
  return confirm_form($form, $message, "admin/eck/{$name}", $caption, t('Delete'));
}

function eck__entity_delete_submit($form, &$form_state) {
  $entity = $form_state['values']['entity'];
  
  $entity->delete();
  
  drupal_cron_run();
  
  //Ok, lets delete the entity
  $form_state['redirect'] = "admin/eck/{$entity->entityType()}";
  
}

function eck__entity_form($form, $form_state, $entity) {

 $form['entity'] = array(
    '#type' => 'value',
    '#value' => $entity
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#weight' => 10000,
    '#value' => t('Save'),
  );
  
 field_attach_form($entity->entityType(), $entity, $form, $form_state);
  
  return $form;
}

function eck__entity_form_submit($form, &$form_state) {
  $entity = $form_state['values']['entity'];
  
  if(isset($form_state['field'])){
    foreach (array_keys($form_state['field']) as $field) {
      $entity->{$field} = _field_unset_empty($field, $form_state['values'][$field]);
    }
  }
  
  $entity->save();
}

function eck__entity_page($name, $id) {
  $build = array();
  $build["{$name}_page"] = array();
  
  $entity_view = eck__entity_view($name, $id);
  
  $build["{$name}_page"] = $entity_view; 
  
  return $build;
}

function eck__entity_uri($entity) {
  return array('path' => "{$entity->entityType()}/{$entity->identifier()}");
}

function eck__entity_label($entity) {
  $hook_name = "entity_{$entity->entityType()}_label";
 
  $new_label = module_invoke_all($hook_name, $entity, $entity->id);

  if (!empty($new_label)) {
    return $new_label[0];
  }
  else {
    return $entity->id;
  }
}

function eck__entity_schema($name) {
  
   return array(
    'description' => "The base table for a(n) {$name}.",
    'fields' => array(
      'id' => array(
        'description' => "The primary identifier for a(n) {$name}.",
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => "The {users}.uid that owns this {$name}; initially, this is the user that created it.",
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => "The Unix timestamp when the {$name} was created.",
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => "The Unix timestamp when the {$name} was most recently saved.",
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      "{$name}_changed" => array('changed'),
      "{$name}_created" => array('created'),
      'uid' => array('uid'),
    ),
    'foreign keys' => 
    array(
      "{$name}_author" => 
       array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
    'primary key' => array('id'),
  );
}


/**
 * Generate the entity info for a specific entity
 * 
 * @param $name the name of the entity
 * @param $label the label of the entity
 */
function eck__entity_info($name, $label) {
  $info = array();
  
  $info[$name] = 
  array(
    'label' => t($label),
    'base table' => "eck_{$name}",
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'module' => 'eck',
    'fieldable' => TRUE,
    'entity keys' => 
    array(
        'id' => 'id'
    ),
    'label callback' => 'eck__entity_label',
    'uri callback' => 'eck__entity_uri',
    'bundle keys' => 
    array(
    )
  );
  
  $info[$name]['bundles'] = 
  array(
    $name => 
    array(
      'label' => $label,
      'admin' => array(
        'path' => "admin/eck/{$name}",
        'access arguments' => array("administer entity")
      )
    )
  );
  
  return $info;
}

/**
 * Define paths for administration of entities
 * 
 * @param $name
 * @param $label
 */
function eck__entity_menu($name, $label) {
  $items = array();
  
  //DELETE Entity
  $items["admin/eck/{$name}/delete"] = array(
    'title' => 'Add',
    'description' => "Add {$name}",
    'page callback' => "drupal_get_form",
    'page arguments' => array('eck_delete', $name, $label),
    'access arguments' => array("administer entity"),
   'type' => MENU_CALLBACK,
  );
    
  //OVERVIEW Entity  Instance
   $items["admin/eck/{$name}"] = array(
    'title' => $label,
    'description' => "View all object of the {$name} type",
    'page callback' => "eck__entity_overview",
    'page arguments' => array($name),
    'access arguments' => array("administer entity"),
    'weight' => 0
  );
  
   $items["admin/eck/{$name}/overview"] = array(
    'title' => "Overview",
    'type' => MENU_DEFAULT_LOCAL_TASK
  );
  
  //CREATE Entity Instance
  $items["admin/eck/{$name}/add"] = array(
    'title' => 'Add',
    'description' => "Add {$name}",
    'page callback' => "eck__entity_add",
    'page arguments' => array($name),
    'access arguments' => array("add {$name}"),
   'type' => MENU_LOCAL_TASK,
   'weight' => 1
  );
  
  //READ Entity Instance
  $items["{$name}/%"] = array(
    'title' => "{$name}",
    'description' => "View the object of {$name} type",
    'page callback' => "eck__entity_page",
    'page arguments' => array($name, 1),
    'access arguments' => array("view {$name}"),
    'weight' => 0
  );
  
  $items["{$name}/%/view"] = array(
    'title' => "View",
    'type' => MENU_DEFAULT_LOCAL_TASK
  );
  
  //UPDATE Entity Instance
  $items["{$name}/%/edit"] = array(
    'title' => "Edit",
    'description' => "Edit the object of {$name} type",
    'page callback' => "eck__entity_edit",
    'page arguments' => array($name, 1),
    'access arguments' => array("edit {$name}"),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1
  );
  
  //DELETE Entity Instance
  $items["admin/eck/{$name}/%/delete"] = array(
    'title' => "Delete {$name}",
    'description' => "Delete the object of {$name} type",
    'page callback' => "drupal_get_form",
    'page arguments' => array('eck__entity_delete', $name, $label, 3),
    'access arguments' => array("administer entity")
  );
 
  return $items;
}

/**
 * Get all the data from a table
 * @param $table the name of the table
 */
function _db_get_all($table) {
 
  $results = db_select($table, 't')->fields('t')->execute();
    
  return $results;
}

/**
 * When an entity form is submitted, field for which no information  was inputed are 
 * still returned, then if we submit that data, empty rows are created in those field databases
 * cluttering them. This function checks and makes sure that the data returned for a field is not
 * empty and unsets it if it is, so no empty data will be added to the database
 * 
 * @param $field_name the name of the field
 * @param $data the data for the field: It usually has this format 
 * array(lang => array( 0 => array( <field stuff> ), 1 => ...));
 */
function _field_unset_empty($field_name, $data) {
 
  //if there is a value we need to check that it is not empty
  $info = field_info_field($field_name);
  
  foreach ($data[LANGUAGE_NONE] as $key => $values) { 
    
    $empty = TRUE;
    foreach (array_keys($info['columns']) as $index) { 
      
      if (!empty($values[$index])) {
        $empty = FALSE;
      }
    }
    if ($empty) {
      unset($data[LANGUAGE_NONE][$key]);
    }
  }
 
  return $data;
}


