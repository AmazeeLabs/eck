<?php



/**
 * Implements hook_entity_property_info_alter().
 */
/*function eck_entity_property_info_alter(&$info) {
  // Create property infos for all defined entites.
  foreach (eck_get_entities() as $entity) {
    $entity->properties = unserialize($entity->properties);
    $entity->custom_properties = unserialize($entity->custom_properties);
    eck__entity__property_info($info[$entity->name], $entity);
  }
}*/



/**
 * Define the paths for the administration section of the Entity Factory
 */
/*function eck_menu() {

  $menu = eck__entity__menu();

   //DELETE Entity
  $items["admin/structure/eck/{$name}/delete"] = array(
    'title' => 'Add',
    'description' => "Add {$name}",
    'page callback' => "drupal_get_form",
    'page arguments' => array('eck_delete', $name, $label),
    'access arguments' => array("administer entities"),
    'type' => MENU_CALLBACK,
  );*/




 /* //READ Entity Instance
  $items["{$name}/%"] = array(
    'title' => "{$name}",
    'description' => "View the object of {$name} type",
    'page callback' => "eck__entity_page",
    'page arguments' => array($name, 1),
    'access arguments' => array("view {$name}"),
    'weight' => 0
  );

  $items["{$name}/%/view"] = array(
    'title' => "View",
    'type' => MENU_DEFAULT_LOCAL_TASK
  );

  //UPDATE Entity Instance
  $items["{$name}/%/edit"] = array(
    'title' => "Edit",
    'description' => "Edit the object of {$name} type",
    'page callback' => "eck__entity_edit",
    'page arguments' => array($name, 1),
    'access arguments' => array("edit {$name}"),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1
  );

  //DELETE Entity Instance
  $items["admin/structure/eck/{$name}/%/delete"] = array(
    'title' => "Delete {$name}",
    'description' => "Delete the object of {$name} type",
    'page callback' => "drupal_get_form",
    'page arguments' => array('eck__entity_delete', $name, $label, 3),
    'access arguments' => array("administer entities")
  );

  return $menu;
}*/



/**
 * Implements hook_permission().
 */
/*function eck_permission() {
  $perms = array(
    'administer entities' =>
    array(
      'title' => t('Administer entities'),
      'restrict access' => TRUE
    )
  );

  foreach (eck_get_entities() as $result) {
    foreach (array('add', 'view', 'edit') as $op) {
      $perms["{$op} {$result->name}"] = array(
        // @todo Fix bad use of t()
        'title' => t(ucfirst($op) . " {$result->label}")
      );
    }
  }

  return $perms;
}*/



/****************************************************
 *           ECK Entity
 ****************************************************/



/*function eck__entity__menu() {
  $menu = array();

  //OVERVIEW Entity
  $menu['admin/structure/eck'] = array(
    'title' => 'Entity',
    'description' => 'A centralized administrative section for entities',
    'page callback' => 'eck__entity__overview',
    'access arguments' => array('administer entities')
  );

  //ADD Entity
  $menu["admin/structure/eck/add"] = array(
    'title' => 'Add entity',
    'description' => 'Add a new entity type',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eck__entity__form'),
    'access arguments' => array('administer entities'),
    'type' => MENU_LOCAL_ACTION,
    'weight' => 1
  );

  
  //Now lets get the menus for each of our entity types
  foreach (eck_get_entities() as $entity) {
    $menu = array_merge($menu, eck__entity_type__menu($entity));
  }

  return $menu;
}*/



/**
 * Loads an entity definition.
 */
/*function eck__entity__load($entity) {
  $entity = db_select('eck', 'e')->fields('e')->condition('name', $entity)->execute()->fetchObject();
  // Why the f*ck did I specify the 'serialize' flag in hook_schema() if it's useless anyway?!
  $entity->properties = unserialize($entity->properties);
  $entity->custom_properties = unserialize($entity->custom_properties);
  return $entity;
}*/



/*function eck__entity__overview() {

  $header = array(t('Name'), array('data' => t('Operations'), 'colspan' => '1'));
  $rows = array();

  $results = db_select('eck', 'e')->fields('e')->execute();

  foreach ($results as $record) {
    $id = $record->id;
    $name = $record->name;
    $label = $record->label;

    $row = array(l("{$id} : {$label}", "admin/structure/eck/{$name}"));
    $row[] = array('data' => l(t('edit'), "admin/structure/eck/{$name}/edit"));
    
    $rows[] = $row;
  }
  $build['entity_table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
  );

  return $build;
}*/



/**
 * Returns all default properties for ECK controlled entities.
 */
/*function eck_default_properties() {
  return array(
    'uuid' => t('UUID'),
    'uid' => t('Author'),
    'created' => t('Created'),
    'changed' => t('Changed'),
  );
}*/

/*function eck__entity__form($form, &$form_state, $entity = NULL) {
  if (!isset($entity)) {
    $entity = (object) array(
      'is_new' => TRUE,
      'label' => '',
      'name' => '',
      'type_label' => '',
      'type' => '',
      'properties' => array(),
      'custom_properties' => array(),
    );
  }
  else {
    $entity = eck__entity__load($entity);
  }

  $form['entity'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );

  $form['label'] = array(
    '#type' => 'textfield',
    '#title' => t("Name"),
    '#default_value' => $entity->label,
    '#description' => t("A human readable name for the entity."),
    '#required' => TRUE,
    '#disabled' => empty($entity->is_new),
  );

  $form['name'] = array(
    '#type' => 'machine_name',
    '#default_value' => $entity->name,
    '#disabled' => empty($entity->is_new),
    '#machine_name' => array(
      'exists' => '_eck_fake_exists',
      'source' => array('label'),
    ),
  );

  // Only allow entering the desired type name when creating a new entity.
  if (!empty($entity->is_new)) {
    $form['type_label'] = array(
      '#type' => 'textfield',
      '#title' => t("Type (optional)"),
      '#description' => t("A type with the same name as the entity is created by default, this will override the default."),
    );

    $form['type'] = array(
      '#type' => 'machine_name',
      '#required' => FALSE,
      '#machine_name' => array(
        'exists' => '_eck_fake_exists',
        'source' => array('type_label'),
      ),
    );
  }

  // Enable/disable properties.
  $form['properties'] = array(
    '#type' => 'fieldset',
    '#title' => t('Properties'),
    '#description' => t('Note: unchecking will delete the property and all data stored within!'),
    '#collapsible' => TRUE,
    '#tree' => TRUE,
  );

  foreach (eck_default_properties() as $property => $label) {
    $form['properties'][$property] = array(
      '#type' => 'checkbox',
      '#title' => $label,
      '#default_value' => !empty($entity->properties[$property]) || !empty($entity->is_new) ? 1 : 0,
    );
  }

  // Enable/disable custom properties.
  $form['custom_properties'] = array(
    '#type' => 'fieldset',
    '#title' => t('Custom properties'),
    '#description' => t('Note: unchecking will delete the property and all data stored within!'),
    '#access' => !empty($entity->custom_properties),
    '#collapsible' => TRUE,
    '#tree' => TRUE,
  );

  foreach ($entity->custom_properties as $property => $info) {
    $form['custom_properties'][$property] = array(
      '#type' => 'checkbox',
      '#title' => eck__entity__custom_property_label($info),
      '#default_value' => 1,
    );
  }

  // Add custom property.
  $form['add'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add custom property'),
    '#access' => empty($entity->is_new),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
  );

  $types[t('Generic')] = array(
    'text' => t('Text'),
    'decimal' => t('Decimal'),
    'integer' => t('Integer'),
    'date' => t('Timestamp'),
  );
  foreach (entity_get_info() as $name => $data) {
    $types[t('Entities')][$name] = $data['label'];
  }

  $form['add']['type'] = array(
    '#type' => 'select',
    '#title' => t('Type'),
    '#options' => array('' => t('- Please choose -')) + $types,
  );

  $form['add']['label'] = array(
    '#type' => 'textfield',
    '#title' => t("Name"),
    '#description' => t("A human readable name for the property."),
  );

  $form['add']['name'] = array(
    '#type' => 'machine_name',
    '#required' => FALSE,
    '#machine_name' => array(
      'label' => t("Database column name"),
      'exists' => '_eck_fake_exists',
      'source' => array('add', 'label'),
    ),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#weight' => 10000,
    '#value' => t('Save'),
  );

  return $form;
}*/



/*function eck__entity__form_validate($form, &$form_state) {
  preg_match("/([^a-z0-9_]|\s)/", $form_state['values']['name'], $matches);

  if (!empty($matches)) {
    form_set_error('name', t("Your Entity name has invalid characters or spaces"));
  }
}*/


/*function eck__entity__custom_property_label($property) {
  $type = $property['type'];
  if (!in_array($type, array('text', 'decimal', 'integer', 'date'))) {
    $type = l($type, "admin/structure/eck/{$type}");
  }
  return $property['label'] . ' (' . t('type: !type', array('!type' => $type)) . ')';
}*/


/*function eck__entity__form_submit($form, &$form_state) {
  $entity = $form_state['values']['entity'];

  //This are required so I don't have to do any checks
  $name = $form_state['values']['name'];
  $label = $form_state['values']['label'];
  $properties = array_filter($form_state['values']['properties']);
  $custom_properties = array_filter($form_state['values']['custom_properties']);

  //If the table does not exist, then this is a valid entity name, and we can save it.
  if (!db_table_exists("eck_{$name}")) {

    //lets add the type to the table
    if (!empty($form_state['values']['type'])) {
      $type = $form_state['values']['type'];
      if (!empty($form_state['values']['type_label'])) {
        $type_label = $form_state['values']['type_label'];
      }
      else {
        $type_label = ucfirst($type);
      }
    }
    else {
      $type = $name;
      $type_label = $label;
    }

    db_insert('eck')
        ->fields(array(
          'name' => $name,
          'label' => $label,
          'properties' => serialize($properties),
          'custom_properties' => serialize(array()),
        ))
        ->execute();

    db_insert('eck_types')
        ->fields(array(
          'entity' => $name,
          'type' => $type,
          'label' => $type_label,
        ))
        ->execute();

    db_create_table("eck_{$name}", eck__entity__schema((object) $form_state['values']));

    // Clear info caches in order to pick up newly created entities.
    drupal_get_schema(NULL, TRUE);
    entity_info_cache_clear();
    // Rebuild the menu to pick up entity related paths.
    menu_rebuild();

    drupal_set_message(t('Entity %entity has been created.', array('%entity' => $label)));


    drupal_goto("admin/structure/eck/{$name}");
  }
  else {
    // @todo Move into validation handler.
    //drupal_set_message(t('Database table %name already exists', array('%name' => $name)), 'error');

    // Process properties.
    $removed_properties = array_diff_key($entity->properties, $properties);
    foreach ($removed_properties as $property => $value) {
      db_drop_field("eck_{$name}", $property);
    }

    $new_properties = array_diff_key($properties, $entity->properties);
    foreach ($new_properties as $property => $value) {
      $schema = array();
      // Add property to database schema.
      eck_add_property_schema($schema, $entity, $property);
      foreach ($schema['fields'] as $field => $spec) {
        db_add_field("eck_{$name}", $field, $spec);
      }
      foreach ($schema['indexes'] as $index => $fields) {
        db_add_index("eck_{$name}", $index, $fields);
      }
    }

    db_merge('eck')
      ->key(array('name' => $name))
      ->fields(array('properties' => serialize($properties)))
      ->execute();

    // Process custom properties.
    $removed_properties = array_diff_key($entity->custom_properties, $custom_properties);
    foreach ($removed_properties as $property => $value) {
      db_drop_field("eck_{$name}", $property);
      unset($entity->custom_properties[$property]);
    }

    if (!empty($form_state['values']['add']['type']) && !empty($form_state['values']['add']['name'])) {
      // Add database column.
      $spec = eck_get_custom_property_schema($form_state['values']['add']);
      db_add_field("eck_{$name}", $form_state['values']['add']['name'], $spec);

      $entity->custom_properties += array(
        $form_state['values']['add']['name'] => array(
          'type' => $form_state['values']['add']['type'],
          'label' => $form_state['values']['add']['label'],
        )
      );
    }

    db_merge('eck')
      ->key(array('name' => $name))
      ->fields(array('custom_properties' => serialize($entity->custom_properties)))
      ->execute();

    // Clear info caches in order to pick up newly created entities.
    drupal_get_schema(NULL, TRUE);
    entity_info_cache_clear();
  }
}*/



/*function eck_delete($form, &$form_state, $name, $label) {

  $form['entity_name'] =
  array(
  '#type' => 'value',
  '#value' => $name,
  );

  $message = t("Are you sure that you want to delete %label", array("%label" => $label));
  $caption = t("This action is irreversible");

  return confirm_form($form, $message, 'admin/eck', $caption, t('Delete'));
  }

  function eck_delete_submit($form, &$form_state) {

  $name = $form_state['values']['entity_name'];

  //delete the bundle
  field_attach_delete_bundle($name, $name);

  //delete the eck database entry
  db_delete('eck')
  ->condition('name', $name)
  ->execute();

  //drop the table
  db_drop_table("eck_{$name}");

  drupal_cron_run();

  //lets rebuild the menu to remove all entity paths
  menu_rebuild();

  $form_state['redirect'] = "admin/eck";
}*/



/*function eck__entity__schema($entity) {
  $schema = array(
    'description' => "The base table for a(n) {$entity->name}.",
    'fields' => array(
      'id' => array(
        'description' => "The primary identifier for a(n) {$entity->name}.",
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The type of the entity',
        'type' => 'varchar',
        'default' => '',
        'length' => 255,
        'not null' => TRUE,
      ),
      'state' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
  );

  // Add properties to schema definition.
  foreach (eck_default_properties() as $property => $label) {
    if (!empty($entity->properties[$property])) {
      eck_add_property_schema($schema, $entity, $property);
    }
  }

  // Add custom properties.
  foreach ($entity->custom_properties as $name => $info) {
    $schema['fields'][$name] = eck_get_custom_property_schema($info);
  }

  // Allow other modules to alter the schema.
  drupal_alter('eck_schema', $schema, $entity);

  return $schema;
}*/



/**
 * Generates schema definition for additional ECK properties.
 *
 * @param $&schema
 *   Schema definition.
 * @param $property
 *   Property to generate schema definition for.
 */
/*function eck_add_property_schema(&$schema, $entity, $property) {
  if (!isset($schema['fields'])) {
    $schema['fields'] = array();
  }

  switch ($property) {
    case 'uuid':
      // Prepend UUID field.
      $schema['fields'] = array('uuid' => array(
        'type' => 'char',
        'length' => 36,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The Universally Unique Identifier.'
      )) + $schema['fields'];
      break;

    case 'uid':
      // Append author id.
      $schema['fields']['uid'] = array(
        'description' => "The {users}.uid that owns this {$entity->name}; initially, this is the user that created it.",
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'initial' => $GLOBALS['user']->uid,
      );
      $schema['indexes']['uid'] = array('uid');
      $schema['foreign keys']["{$entity->name}_author"] = array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      );
      break;

    case 'created':
      // Append created timestamp.
      $schema['fields']['created'] = array(
        'description' => "The Unix timestamp when the {$entity->name} was created.",
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'initial' => REQUEST_TIME,
      );
      $schema['indexes']["{$entity->name}_created"] = array('created');
      break;

    case 'changed':
      // Append changed timestamp.
      $schema['fields']['changed'] = array(
        'description' => "The Unix timestamp when the {$entity->name} was most recently saved.",
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'initial' => REQUEST_TIME,
      );
      $schema['indexes']["{$entity->name}_changed"] = array('changed');
      break;
  }
}*/



/*function eck_get_custom_property_schema($property) {
  switch ($property['type']) {
    case 'text':
      $spec = array(
        //'description' => '',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      );
      break;

    case 'decimal':
      $spec = array(
        //'description' => '',
        'type' => 'float',
        'not null' => TRUE,
        'default' => 0,
      );
      break;

    case 'integer':
    case 'date':
    default:
      // Integer, date, and entities are all of type 'int'.
      $spec = array(
        //'description' => '',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      );
      break;
  }
  return $spec;
}*/



/**
 * Generate the entity info for a specific entity
 *
 * @param $name the name of the entity
 * @param $label the label of the entity
 */
function eck__entity__info($entity) {
  $name = $entity->name;
  $label = $entity->label;

  $info = array();

  if (!drupal_autoload_class($entity_class = eck_get_class_name($name, 'Entity'))) {
    $entity_class = 'EckEntity';
  }
  if (!drupal_autoload_class($controller_class = eck_get_class_name($name, 'Controller'))) {
    $controller_class = 'EckController';
  }

  $info[$name] = array(
    'label' => t($label),
    'base table' => "eck_{$name}",
    'entity class' => $entity_class,
    'controller class' => $controller_class,
    'module' => 'eck',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'bundle' => 'type'
    ),
    'label callback' => 'eck__entity_instance__label',
    'uri callback' => 'eck__entity_instance__uri',
    // Bundles are defined by the entity types below
    'bundles' => array(),
    // Bundle keys tell the FieldAPI how to extract information from the bundle objects
    'bundle keys' => array(
      'bundle' => 'type'
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => TRUE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => TRUE,
      ),
      'search' => array(
        'label' => t('Search'),
        'custom settings' => TRUE,
      ),
      'xml' => array(
        'label' => t('XML'),
        'custom settings' => TRUE,
      ),
      'rss' => array(
        'label' => t('RSS'),
        'custom settings' => TRUE,
      ),
    )
  );

  foreach (eck_get_types($name) as $type) {
    $info[$name]['bundles'][$type->type] = array(
      'label' => $type->label,
      'admin' => array(
        'path' => "admin/structure/eck/{$name}/{$type->type}",
        'access arguments' => array('administer entities')
      )
    );
  }

  return $info;
}



/**
 * Entity specific implementation of hook_entity_property_info_alter().
 */
/*function eck__entity__property_info(&$info, $entity) {
  $properties = &$info['properties'];

  if (isset($properties['uid'])) {
    $properties['uid']['label'] = t('User');
    $properties['uid']['type'] = 'user';
    $properties['uid']['description'] = t('The author of this entity.');
  }
  if (isset($properties['created'])) {
    $properties['created']['label'] = t('Created');
    $properties['created']['type'] = 'date';
    $properties['created']['description'] = t('The Unix timestamp when the entity has been created.');
  }
  if (isset($properties['changed'])) {
    $properties['changed']['label'] = t('Changed');
    $properties['changed']['type'] = 'date';
    $properties['changed']['description'] = t('The Unix timestamp when the entity was most recently saved.');
  }

  // Add custom properties.
  foreach ($entity->custom_properties as $name => $property) {
    $properties[$name]['label'] = t($property['label']);
    $properties[$name]['type'] = $property['type'];
    //$properties[$name]['description'] = '';
  }
}*/



/****************************************************
 *                    ENTITY Type
 ****************************************************/



/**
 * Loads an entity type definition.
 */
function eck__entity_type__load($type) {
  $type = db_select('eck_types', 't')->fields('t')->condition('type', $type)->execute()->fetchObject();
  return $type;
}



function eck__entity_type__overview($entity) {

  $entity_name = $entity->name;

  $header = array(
    'type' => t('Entity type'),
    'operations' => t('Operations'),
  );
  $rows = array();
  $destination = drupal_get_destination();

  foreach (eck_get_types($entity_name) as $type) {
    $operations = array();
    /*
    $operations['delete'] = array(
      'title' => t('delete'),
      'href' => "admin/structure/eck/{$entity_name}/{$type->id}/delete",
      'query' => $destination,
    );
    */

    $row = array(
      'type' => array(
        'data' => array(
          '#type' => 'link',
          '#title' => $type->label,
          '#href' => "admin/structure/eck/{$entity_name}/{$type->type}",
        ),
      ),
      'operations' => array(
        'data' => array(
          '#theme' => 'links__eck_operations',
          '#links' => $operations,
          '#attributes' => array('class' => array('links', 'inline')),
        ),
      ),
    );

    $rows[$type->type] = $row;
  }

  $page['entity_types_table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
  );

  // Add sample class code.
  $entity_class = eck_get_class_name($entity_name, 'Entity');

  $page['sample_code'] = array(
    '#type' => 'item',
    '#title' => t('Optional entity class'),
    '#markup' => "<pre>" . check_plain("class " . $entity_class . " extends EckEntity {}") . "</pre>",
    '#description' => t('You may add this custom class for the entity. To create a new instance of this class programmatically call:<br /><code>@code</code>', array(
      '@code' => "entity_create('{$entity_name}', array());"
    )),
  );

  if (drupal_autoload_class($entity_class)) {
    // Display class hierarchy.
    $parent_classes = eck_get_parent_classes($entity_class);
    $page['implementation'] = array(
      '#type' => 'item',
      '#title' => t('Current implementation (!type)', array('!type' => t('entity'))),
      '#markup' => "<pre>" . implode("\n  extends ", $parent_classes) . "</pre>",
      '#description' => t('Shows the current class implementation hierarchy.'),
    );

    // Display all child classes that depend on this one.
    $childs = array();
    foreach (eck_get_types($entity_name) as $type) {
      $class = eck_get_class_name($type->type, 'EntityType');
      if (drupal_autoload_class($class)) {
        $parent_classes = eck_get_parent_classes($class);
        if (in_array($entity_class, $parent_classes)) {
          $childs[] = array(
            'title' => $class,
            'href' => "admin/structure/eck/{$entity_name}/{$type->type}",
          );
        }
      }
    }

    if (!empty($childs)) {
      $page['childs'] = array(
        '#type' => 'item',
        '#title' => t('Child implementations'),
        '#description' => t('Lists all child classes that depend on the above implementation.'),
      );
      $page['childs']['implementations'] = array(
        '#theme' => 'links',
        '#links' => $childs,
        '#attributes' => array('class' => array('links')),
      );
    }

    // Display custom properties.
    $custom_properties = unserialize($entity->custom_properties);
    if (!empty($custom_properties)) {
      $properties = array();
      foreach ($custom_properties as $property => $info) {
        $properties[] = eck__entity__custom_property_label($info);
      }
      $page['custom_properties'] = array(
        '#type' => 'item',
        '#title' => t('Custom properties'),
        '#markup' => theme('item_list', array('items' => $properties)),
        '#description' => t('Lists all custom (non-field) properties attached to this entity.'),
      );
    }
  }

  return $page;
}



/*function eck__entity_type__menu($entity) {
  $entity_name = $entity->name;
  $entity_label = $entity->label;

  //Create the menus relavant to types
  $menu = array();

  //OVERVIEW Entity types
  $menu["admin/structure/eck/{$entity_name}"] = array(
    'title' => $entity_label,
    'description' => "View all types of the '{$entity_label}' entity",
    'page callback' => "eck__entity_type__overview",
    'page arguments' => array($entity),
    'access arguments' => array("administer {$entity_label} types"),
  );

  $menu["admin/structure/eck/{$entity_name}/list"] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $menu["admin/structure/eck/{$entity_name}/edit"] = array(
    'title' => "Edit $entity_label",
    'description' => "Edit the '{$entity_label}' entity",
    'page callback' => 'drupal_get_form',
    'page arguments' => array("eck__entity__form", $entity_name),
    'access arguments' => array("administer {$entity_label} types"),
    'type' => MENU_LOCAL_TASK,
  );

  $menu["admin/structure/eck/{$entity_name}/add"] = array(
    'title' => "Add '{$entity_label}' Type",
    'description' => "Add a new '{$entity_label}' type",
    'page callback' => "drupal_get_form",
    'page arguments' => array('eck__entity_type__add', $entity),
    'access arguments' => array("add {$entity_label} type"),
    'type' => MENU_LOCAL_ACTION,
  );

  foreach (eck_get_types($entity_name) as $type) {
    $menu = array_merge($menu, eck__entity_instance__menu($entity, $type));
  }

  return $menu;
}*/



function eck_get_parent_classes($class_name){
    $classes = array($class_name);
    while (($class_name = get_parent_class($class_name)) !== false) {
        $classes[] = $class_name;
    }

    return $classes;
}



//ADD Entity types
/*function eck__entity_type__add($form, &$form_state, $entity) {

  $form['entity'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );

  $form['type_label'] = array(
    '#type' => 'textfield',
    '#title' => "Type",
    '#description' => "A Human readable name for the type",
  );

  $form['type'] = array(
    '#type' => 'machine_name',
    '#required' => FALSE,
    '#machine_name' => array(
      'exists' => '_eck_fake_exists',
      'source' => array('type_label'),
    )
  );

  $form['#validate'][] = 'eck__entity_type__add_validate';

  $form['submit'] = array(
    '#type' => 'submit',
    '#weight' => 10000,
    '#value' => t('Save'),
  );

  return $form;
}*/



/*function eck__entity_type__add_validate($form, &$form_state) {

  $entity = $form_state['values']['entity'];

  //the type does not have to be unique in the table, but it should be unique to its entity so we will check that here
  foreach (eck_get_types($entity->name) as $type) {
    if ($type->type == $form_state['values']['type']) {
      form_set_error('type', t("type '{$type->type} already exists in this entity"));
    }
  }
}*/



/*function eck__entity_type__add_submit($form, &$form_state) {

  $entity = $form_state['values']['entity'];
  $type = $form_state['values']['type'];
  $type_label = $form_state['values']['type_label'];

  db_insert('eck_types')
      ->fields(array(
        'entity' => $entity->name,
        'type' => $type,
        'label' => $type_label,
      ))
      ->execute();

  drupal_set_message(t('%entity type %type has been saved', array('%entity' => $entity->label, '%type' => $type_label)));

  drupal_get_schema(NULL, TRUE);
  entity_info_cache_clear();
  menu_rebuild();

  drupal_goto("admin/structure/eck/{$entity->name}/{$type}");
}*/


/****************************************************
 *                    ENTITY Instances
 ****************************************************/



function eck__entity_instance__menu($entity, $type) {
  $menu = array();

  $entity_name = $entity->name;
  $entity_label = $entity->label;
  $entity_type = $type->type;
  $entity_type_label = $type->label;


  //OVERVIEW Entity Instance
  $menu["admin/structure/eck/{$entity_name}/{$entity_type}"] = array(
    'title' => $entity_type_label,
    'description' => "View all {$entity_label} instances of {$entity_type_label} type",
    'page callback' => "eck__entity_instance__overview",
    'page arguments' => array($entity, $type),
    'access arguments' => array("administer {$entity_label} {$entity_type_label}"),
    'weight' => 0
  );

  $menu["admin/structure/eck/{$entity_name}/{$entity_type}/overview"] = array(
    'title' => "Overview",
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0
  );

  //CREATE Entity Instance
  $menu["admin/structure/eck/{$entity_name}/{$entity_type}/add"] = array(
    'title' => "Add {$entity_type_label} Instance",
    'description' => "Add {$entity_type_label} Instance",
    'page callback' => "eck__entity_instance__add",
    'page arguments' => array($entity, $type),
    'access arguments' => array("add {$entity_label} instance"),
    'type' => MENU_LOCAL_ACTION,
    'weight' => 1
  );

  //READ Entity Instance
  $menu["{$entity_name}/{$entity_type}/%"] = array(
    'title' => "{$entity_name}",
    'description' => "View {$entity_name} objects of type {$entity_type}",
    'page callback' => "eck__entity_instance__page",
    'page arguments' => array($entity, $type, 2),
    'access arguments' => array("view {$entity_name} {$entity_type}"),
    'weight' => 0
  );

  $menu["{$entity_name}/{$entity_type}/%/view"] = array(
    'title' => "View",
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0
  );

  //UPDATE Entity Instance
  $menu["{$entity_name}/{$entity_type}/%/edit"] = array(
    'title' => "Edit",
    'description' => "Edit {$entity_name} of type {$entity_type}",
    'page callback' => "eck__entity_instance__edit",
    'page arguments' => array($entity, $type, 2),
    'access arguments' => array("edit {$entity_name} {$entity_type}"),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1
  );

  //DELETE Entity Instance
  $menu["admin/structure/eck/{$entity_name}/{$entity_type}/%/delete"] = array(
    'title' => "Delete",
    'description' => "Delete the object of {$entity_name} type",
    'page callback' => "drupal_get_form",
    'page arguments' => array('eck__entity_instance__delete', $entity_name, $entity_type, 4),
    'access arguments' => array("delete {$entity_name} {$entity_type}")
  );

  return $menu;
}



function eck__entity_instance__overview($entity, $type) {

  $entity_name = $entity->name;
  $entity_label = $entity->label;
  $entity_type = $type->type;
  $entity_type_label = $type->label;

  // List all entity instances of given type.
  $results = db_select("eck_{$entity_name}", 't')->fields('t')->condition('type', $entity_type, '=')->execute();
  $ids = array();
  foreach ($results as $record) {
    $ids[] = $record->id;
  }
  $page['entity_instances_table'] = entity_table(entity_load($entity_name, $ids));

  // Add sample class code.
  $entity_type_class = eck_get_class_name($entity_type, 'EntityType');
  $entity_class = eck_get_class_name($entity_name, 'Entity');

  $page['sample_code'] = array(
    '#type' => 'item',
    '#title' => t('Optional entity type class'),
    '#markup' => "<pre>" . check_plain("class " . $entity_type_class . " extends EckEntity {}") . "</pre>",
    '#description' => t('You may add this custom class for the bundle. To create a new instance of this class programmatically call:<br /><code>@code</code>', array(
      '@code' => "entity_create('{$entity_name}', array('type' => '{$entity_type}'));"
    )),
  );

  // Add class listings.
  $implementation = drupal_autoload_class($entity_type_class) ? 'entity type' : drupal_autoload_class($entity_class) ? 'entity' : FALSE;

  if ($implementation) {
    // Display class hierarchy.
    $parent_classes = eck_get_parent_classes($implementation == 'entity type' ? $entity_type_class : $entity_class);
    $page['implementation'] = array(
      '#type' => 'item',
      '#title' => t('Current implementation (!type)', array('!type' => $implementation == 'entity type' ? t('entity type') : t('entity'))),
      '#markup' => "<pre>" . implode("\n  extends ", $parent_classes) . "</pre>",
      '#description' => t('Shows the current class implementation hierarchy.'),
    );

    // Display all child classes that depend on this one.
    $childs = array();
    if ($implementation == 'entity type') {
      foreach (eck_get_types($entity_name) as $type) {
        if ($type->type != $entity_type) {
          $class = eck_get_class_name($type->type, 'EntityType');
          if (drupal_autoload_class($class)) {
            $parent_classes = eck_get_parent_classes($class);
            if (in_array($entity_class, $parent_classes) || in_array($entity_type_class, $parent_classes)) {
              $childs[] = array(
                'title' => $class,
                'href' => "admin/structure/eck/{$entity_name}/{$type->type}",
              );
            }
          }
        }
      }
    }
    if (!empty($childs)) {
      $page['childs'] = array(
        '#type' => 'item',
        '#title' => t('Child implementations'),
        '#description' => t('Lists all child classes that depend on the above implementation.'),
      );
      $page['childs']['implementations'] = array(
        '#theme' => 'links',
        '#links' => $childs,
        '#attributes' => array('class' => array('links')),
      );
    }

    // Display custom properties.
    $custom_properties = unserialize($entity->custom_properties);
    if (!empty($custom_properties)) {
      $properties = array();
      foreach ($custom_properties as $property => $info) {
        $properties[] = eck__entity__custom_property_label($info);
      }
      $page['custom_properties'] = array(
        '#type' => 'item',
        '#title' => t('Custom properties'),
        '#markup' => theme('item_list', array('items' => $properties)),
        '#description' => t('Lists all custom (non-field) properties attached to this entity.'),
      );
    }
  }

  return $page;
}

/**
 * This function creates the renderable array to display a table of entities
 * $entities an associative arrays of entities keyed by id, this array is returned by entity_load
 */
function entity_table($entities){
  $header = array(
    'id' => t('ID'),
    'operations' => t('Operations')
  );
  $rows = array();
  $destination = drupal_get_destination();

  foreach ($entities as $id => $entity) {
    $entity_type = $entity->entityType();
    $type = $entity->type;

    $uri = entity_uri($entity_type, $entity);
    $operations['edit'] = array(
      'title' => t('edit'),
      'href' => "$entity_type/$type/{$id}/edit",
      'query' => $destination,
    );
    $operations['delete'] = array(
      'title' => t('delete'),
      'href' => "admin/structure/eck/$entity_type/$type/{$id}/delete",
      'query' => $destination,
    );

    $row = array(
      'id' => array(
        'data' => array(
          '#type' => 'link',
          '#title' => entity_label($entity_type, $entity),
          '#href' => $uri['path'],
          '#options' => $uri['options'],
        ),
      ),
      'operations' => array(
        'data' => array(
          '#theme' => 'links__eck_operations',
          '#links' => $operations,
          '#attributes' => array('class' => array('links', 'inline')),
        ),
      ),
    );

    drupal_alter("entity_table_{$entity_type}", $row, $entity);

    $rows[$id] = $row;
  }

  return array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
  );

}



function eck__entity_instance__add($entity, $type) {

  $entity_name = $entity->name;
  $entity_label = $entity->label;
  $entity_type = $type->type;
  $entity_type_label = $type->label;

  global $user;

  $values = array(
    'entity_name' => $entity_name,
    'type' => $entity_type,
    'uid' => $user->uid,
    'created' => REQUEST_TIME,
    'changed' => REQUEST_TIME,
  );
  $obj = entity_create($entity_name, $values);

  return drupal_get_form("eck__entity_instance__form", $obj);
}



function eck__entity_instance__view($entity, $id) {

  $entity_name = $entity->name;

  if (is_numeric($id)) {
    $obj = entity_load($entity_name, array($id));
  }

  return $obj[$id]->view();
}



function eck__entity_instance__edit($entity, $type, $id) {
  $entity_name = $entity->name;

  if (is_numeric($id)) {
    $objs = entity_load($entity_name, array($id));
    $obj = $objs[$id];
  }

  global $user;

  $obj->uid = $user->uid;
  $obj->changed = REQUEST_TIME;

  return drupal_get_form("eck__entity_instance__form", $obj);
}



function eck__entity_instance__delete($form, &$form_state, $entity_name, $entity_type, $id) {

  $objs = entity_load($entity_name, array($id));


  $form['entity'] = array(
    '#type' => 'value',
    '#value' => $objs[$id],
  );

  $form['entity_name'] = array(
    '#type' => 'value',
    '#value' => $entity_name,
  );

  $form['entity_type'] = array(
    '#type' => 'value',
    '#value' => $entity_type,
  );

  $message = t("are you sure that you want to delete %id", array("%id" => $id));

  $caption = t("This action is irreversible");

  return confirm_form($form, $message, "admin/structure/eck/{$entity_name}", $caption, t('Delete'));
}



function eck__entity_instance__delete_submit($form, &$form_state) {
  $entity = $form_state['values']['entity'];
  $entity_name = $form_state['values']['entity_name'];
  $entity_type = $form_state['values']['entity_type'];

  $entity->delete();

  drupal_cron_run();

  //Ok, lets delete the entity
  $form_state['redirect'] = "admin/structure/eck/{$entity_name}/{$entity_type}";
}



function eck__entity_instance__form($form, $form_state, $entity) {

  $form['entity'] = array(
    '#type' => 'value',
    '#value' => $entity
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#weight' => 10000,
    '#value' => t('Save'),
  );

  field_attach_form($entity->entityType(), $entity, $form, $form_state);

  return $form;
}



function eck__entity_instance__form_submit($form, &$form_state) {
  $entity = $form_state['values']['entity'];

  if (isset($form_state['field'])) {
    foreach (array_keys($form_state['field']) as $field) {
      $entity->{$field} = _field_unset_empty($field, $form_state['values'][$field]);
    }
  }

  $entity->save();

  drupal_set_message(t("Entity {$entity->id} has been saved"));
}



function eck__entity_instance__label($entity) {
  $hook_name = "entity_{$entity->entityType()}_label";

  $new_label = module_invoke_all($hook_name, $entity, $entity->id);

  if (!empty($new_label)) {
    return $new_label[0];
  }
  else {
    return $entity->id;
  }
}



function eck__entity_instance__uri($entity) {
  return array('path' => "{$entity->entityType()}/{$entity->type}/{$entity->identifier()}");
}



function eck__entity_instance__page($entity, $type, $id) {

  $entity_name = $entity->name;
  $entity_label = $entity->label;
  $entity_type = $type->type;
  $entity_type_label = $type->label;

  $build = array();

  $entity_view = eck__entity_instance__view($entity, $id);

  $build["{$entity_name}_{$entity_type}_page"] = $entity_view;

  return $build;
}



/**
 * Get all entity definitions.
 */
function eck_get_entities() {
  return db_select('eck', 'e')->fields('e')->execute();
}



/**
 * Get all entity type definitions, optionally only for a specific entity.
 *
 * @param $name
 *   Optional name of an entity to filter by.
 */
function eck_get_types($name = NULL) {
  $query = db_select('eck_types', 't')->fields('t');
  if ($name) {
    $query->condition('entity', $name);
  }
  return $query->execute();
}



/**
 * When an entity form is submitted, field for which no information  was inputed are
 * still returned, then if we submit that data, empty rows are created in those field databases
 * cluttering them. This function checks and makes sure that the data returned for a field is not
 * empty and unsets it if it is, so no empty data will be added to the database
 *
 * @param $field_name the name of the field
 * @param $data the data for the field: It usually has this format
 * array(lang => array( 0 => array( <field stuff> ), 1 => ...));
 */
/*function _field_unset_empty($field_name, $data) {

  //if there is a value we need to check that it is not empty
  $info = field_info_field($field_name);

  foreach ($data[LANGUAGE_NONE] as $key => $values) {

    $empty = TRUE;
    foreach (array_keys($info['columns']) as $index) {

      if (!empty($values[$index])) {
        $empty = FALSE;
      }
    }
    if ($empty) {
      unset($data[LANGUAGE_NONE][$key]);
    }
  }

  return $data;
}*/



/*function _eck_fake_exists() {
  return FALSE;
}*/



/**
 * Generates an upper camel case class name from a machine name.
 *
 * @params $name
 *   The machine name to convert to camel case.
 * @params $suffix
 *   Optional class name suffix.
 */
function eck_get_class_name($name, $suffix = '') {
  $parts = array_map('ucfirst', explode('_', $name));
  if ($suffix) {
    $parts[] = $suffix;
  }
  return implode('', $parts);
}



/**
 * Base controller class for ECK entites.
 */
class EckController extends EntityAPIController {



  public function create(array $values = array()) {
    global $user;

    // Set default values.
    $values += array(
      'type' => $this->entityType,
      'uid' => $user->uid,
      'created' => REQUEST_TIME,
      'changed' => REQUEST_TIME,
    );

    // Allow to create custom per-bundle specific class implementations.
    $class_name = eck_get_class_name($values['type'], 'EntityType');
    if (drupal_autoload_class($class_name)) {
      $this->entityInfo['entity class'] = $class_name;
    }

    return parent::create($values);
  }



  public function query($ids, $conditions, $revision_id = FALSE) {

    $result = parent::query($ids, $conditions, $revision_id);

    if (!empty($this->entityInfo['entity class']) && $result->rowCount()) {
      $row = $result->fetch(PDO::FETCH_ASSOC);

      // Allow to create custom per-bundle specific class implementations.
      $class_name = eck_get_class_name($row['type'], 'EntityType');
      if (drupal_autoload_class($class_name)) {
        $this->entityInfo['entity class'] = $class_name;
      }

      $result = parent::query($ids, $conditions, $revision_id);
    }

    return $result;
  }



}



/**
 * Base class for ECK entites.
 */
class EckEntity extends Entity {

  public $id;
  public $uid;
  public $changed;
  public $created;
  public $type;



  public function save() {
    // Update changed timestamp
    $this->changed = REQUEST_TIME;
    return parent::save();
  }



}
